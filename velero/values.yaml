---
velero:
  credentials:
    secretContents:
      cloud: |
        AZURE_SUBSCRIPTION_ID='<path:keyvault-name#velero-subscription-id>'
        AZURE_TENANT_ID='<path:keyvault-name#velero-tenant-id>'
        AZURE_CLIENT_ID='<path:keyvault-name#velero-client-id>'
        AZURE_CLIENT_SECRET='<path:keyvault-name#velero-client-secret>'
        AZURE_RESOURCE_GROUP=<Storage-Account-Resource-Group>
        AZURE_CLOUD_NAME=AzurePublicCloud

  configuration:
    backupSyncPeriod: 1h
    repositoryMaintenanceJob:
      latestJobsCount: 1          ## Keep Kopia maintainence job count
    backupStorageLocation:
      - name: azure               ## Cloud Provider
        bucket: velero-k8s-backup ## Azure Blob Container name
        provider: azure
        default: true
        config:
          resourceGroup: <Storage-Account-Resource-Group> ## Storage Account Resource Group Name
          storageAccount: <Storage-Account-Name>          ## Storage Account Name
    volumeSnapshotLocation:
      - name: azure
        provider: azure
        config: {}

    # Cleanup the expired backup every 5 min using GC and use backup repo for Kopia configMap
    extraArgs:
      - --garbage-collection-frequency=5m
      - --backup-repository-configmap=kopia-repository-config
      - --default-repo-maintain-frequency=5m

  snapshotsEnabled: false
  deployNodeAgent: true
  uploaderType: kopia

  initContainers:
    - name: velero-plugin-for-microsoft-azure
      image: velero/velero-plugin-for-microsoft-azure:v1.12.1
      volumeMounts:
        - mountPath: /target
          name: plugins

  schedules:
    10min-scheduled-backup:
      disabled: false
      labels:
        app: velero-backup
      annotations: {}
      schedule: "*/10 * * * *"  # Every 10 minutes
      template:
        ttl: "20m"  # Keep backups for 20 min 
        storageLocation: azure
        includedNamespaces:
          - "*"  # Include all namespaces
        excludedNamespaces:
        # Exclude system and unwanted namespace for backup
          - kube-system  
          - kube-public
          - kube-node-lease
          - default
          - velero
        snapshotVolumes: false  # Enable volume snapshots
        includeClusterResources: true  # Include cluster-wide resources (e.g. CRDs, StorageClasses)


  # ConfigMap for Kopia Engine 
  extraObjects:
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: kopia-repository-config
        namespace: velero
      data:
        kopia: |
          {
            "cacheLimitMB": 2048,
            "fullMaintenanceInterval": "fastGC"
          }


    # Service Account for Blob container cleanup 
    - apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: azure-blob-cleaner-sa
        namespace: velero
        annotations:
          azure.workload.identity/client-id: ""

    # Clean up Blob Container old PVC metadata
    - apiVersion: v1
      kind: ConfigMap
      metadata:
        name: blob-cleaner-script
        namespace: velero
      data:
        cleanup.sh: |
          #!/bin/bash
          set -e

          echo "🔐 Logging in with Managed Identity..."
          az login --federated-token "$(cat $AZURE_FEDERATED_TOKEN_FILE)" \
                  --service-principal -u $AZURE_CLIENT_ID -t $AZURE_TENANT_ID > /dev/null

          STORAGE_ACCOUNT_NAME="${AZURE_STORAGE_ACCOUNT}"
          CONTAINER_NAME="${AZURE_CONTAINER_NAME}"
          ROOT_PREFIX="kopia/"
          CUTOFF_TIME=$(date -u -d '1 day ago' +%s)
          TARGET_PREFIXES=("_log" "n" "q")

          echo "📦 Scanning: ${STORAGE_ACCOUNT_NAME}/${CONTAINER_NAME}/${ROOT_PREFIX}"

          BLOB_LIST=$(az storage blob list \
            --account-name "$STORAGE_ACCOUNT_NAME" \
            --container-name "$CONTAINER_NAME" \
            --auth-mode login \
            --prefix "$ROOT_PREFIX" \
            --query "[].{name:name, last_modified:properties.lastModified}" \
            -o tsv)

          if [[ -z "$BLOB_LIST" ]]; then
            echo "✅ No blobs found."
            exit 0
          fi

          while IFS=$'\t' read -r BLOB_NAME LAST_MODIFIED; do
            FILE_NAME=$(basename "$BLOB_NAME")
            MATCH=0
            for PREFIX in "${TARGET_PREFIXES[@]}"; do
              if [[ "$FILE_NAME" == $PREFIX* ]]; then
                MATCH=1
                break
              fi
            done

            [[ "$MATCH" -eq 0 ]] && continue

            BLOB_TIME=$(date -u -d "$LAST_MODIFIED" +%s 2>/dev/null || echo 0)

            if (( BLOB_TIME < CUTOFF_TIME )); then
              echo "🧹 Deleting: $BLOB_NAME"
              az storage blob delete \
                --account-name "$STORAGE_ACCOUNT_NAME" \
                --container-name "$CONTAINER_NAME" \
                --name "$BLOB_NAME" \
                --auth-mode login
            else
              echo "⏩ Skipping newer: $BLOB_NAME"
            fi
          done <<< "$BLOB_LIST"

          echo "✅ Done."

    # Cronjob to cleanup Blob Container
    - apiVersion: batch/v1
      kind: CronJob
      metadata:
        name: azure-blob-cleaner
        namespace: velero
      spec:
        schedule: "0 11 * * *"
        concurrencyPolicy: Forbid
        startingDeadlineSeconds: 30
        successfulJobsHistoryLimit: 1
        failedJobsHistoryLimit: 1
        jobTemplate:
          spec:
            template:
              metadata:
                labels:
                  azure.workload.identity/use: "true"
              spec:
                serviceAccountName: azure-blob-cleaner-sa
                restartPolicy: OnFailure
                containers:
                - name: cleaner
                  image: mcr.microsoft.com/azure-cli
                  command: ["/bin/bash", "/script/cleanup.sh"]
                  volumeMounts:
                    - name: script
                      mountPath: /script
                  env:
                    - name: AZURE_STORAGE_ACCOUNT
                      value: 
                    - name: AZURE_CONTAINER_NAME
                      value: 
                    - name: AZURE_CLIENT_ID
                      value:
                volumes:
                  - name: script
                    configMap:
                      name: blob-cleaner-script